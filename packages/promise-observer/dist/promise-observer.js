"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var Vue=_interopDefault(require("vue"));function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var deepMerge=require("deepmerge"),isPromise=function(e){return Boolean(e&&"function"==typeof e.then)},optionsHelpers={normalize:function(e){return Vue.observable(deepMerge(e,this.options))},validate:function(e){Object.keys(this.options).forEach(function(t){e.hasOwnProperty(t)||console.error("".concat(t," doesn't seem to be a valid option. valid options are -> ").concat(e))})}},defaultOptions={fields:{data:""}},promiseObserver={name:"PromiseObserver",props:{promise:{required:!0,validator:function(e){return"object"===_typeof(e)||null===e}},options:{type:Object,required:!1,default:function(){return{}}}},data:function(){return{hasFulfilled:!1,hasRejected:!1,mainData:null,response:null,reason:"",isPending:!1}},watch:{promise:{immediate:!0,handler:function(){this.hasPromise&&(this.getReadyForNewOne(),this.observe())}}},computed:{normalizedOptions:function(){return optionsHelpers.validate.apply(this,[defaultOptions]),optionsHelpers.normalize.apply(this,[defaultOptions])},hasPromise:function(){return!!this.promise&&isPromise(this.promise)},state:function(){return this.hasRejected?"rejected":this.hasFulfilled?"fulfilled":void 0}},methods:{getReadyForNewOne:function(){this.hasFulfilled=!1,this.hasRejected=!1,this.response=null,this.mainData=null},observe:function(){var e=this;this.isPending=!0,this.promise.then(function(t){return console.log({response:t}),e.hasFulfilled=!0,e.response=t,e.mainData=(null==t?void 0:t[e.normalizedOptions.fields.data])||t,e.$emit("fulfill",t),t}).catch(function(t){return e.hasRejected=!0,e.reason=t,e.$emit("error",t),t}).finally(function(){e.isPending=!1})}},render:function(e){if(this.hasPromise)return this.$scopedSlots.default({state:this.state,isPending:this.isPending,hasFulfilled:this.hasFulfilled,response:this.response,mainData:this.mainData,hasRejected:this.hasRejected,reason:this.reason})}};module.exports=promiseObserver;
//# sourceMappingURL=promise-observer.js.map
